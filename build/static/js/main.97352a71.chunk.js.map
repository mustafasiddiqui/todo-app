{"version":3,"sources":["Todo.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","className","title","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","App","useState","todos","setTodos","input","setInput","useEffect","console","log","collection","onSnapshot","snapshot","docs","map","doc","data","type","value","onChange","e","target","disabled","onClick","preventDefault","todo","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAWeA,G,MARF,SAACC,GAEZ,OAAQ,yBAAKC,UAAU,QACrB,4BAAKD,EAAME,U,gBCQAC,E,OAZKC,EAASC,cAAc,CAEvCC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAGYC,YC6BRC,MAnCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KAmBb,OAfAC,qBAAU,WACRC,QAAQC,IAAI,mCACZnB,EAAGoB,WAAW,SAASC,YAAW,SAAAC,GAChCR,EAASQ,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAO3B,eAG9C,IAUD,yBAAKD,UAAU,OACb,iDAvBK,WAwBL,8BACE,2BAAO6B,KAAK,OAAOC,MAAOb,EACxBc,SAAU,SAAAC,GAAC,OAAId,EAASc,EAAEC,OAAOH,UACnC,4BAAQI,UAAWjB,EAAOY,KAAK,SAASM,QAbzB,SAACH,GACpBA,EAAEI,iBACFpB,EAAS,GAAD,mBAAKD,GAAL,CAAYE,KACpBC,EAAS,MAUL,aAGDH,EAAMW,KAAI,SAACW,EAAMC,GAAP,OACT,kBAAC,EAAD,CAAMrC,MAAOoC,EAAME,IAAKD,SCxBZE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.97352a71.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Todo.css'\r\n\r\nconst Todo = (props) => {\r\n  // console.log(\"props: \"+JSON.stringify(props));\r\n  return (<div className=\"todo\">\r\n    <h2>{props.title}</h2>\r\n    {/* <p>{props.description}</p> */}\r\n  </div>);\r\n}\r\n\r\nexport default Todo;","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n\r\n    apiKey: \"AIzaSyA5Jx7dVziGplCrvLd28mZUNtwGlMJ4hTk\",\r\n    authDomain: \"todo-app-8b455.firebaseapp.com\",\r\n    databaseURL: \"https://todo-app-8b455.firebaseio.com\",\r\n    projectId: \"todo-app-8b455\",\r\n    storageBucket: \"todo-app-8b455.appspot.com\",\r\n    messagingSenderId: \"250760254302\",\r\n    appId: \"1:250760254302:web:ca65ad49ebee279126f5cf\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport default db;","import React, { useEffect, useState } from 'react';\nimport Todo from './Todo'\nimport './App.css';\nimport db from './firebase';\n\nlet name = \"Mustafa\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  useEffect(() => {\n    console.log(\"I ran when the component loaded\");\n    db.collection('todos').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => doc.data().title))\n    })\n\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setTodos([...todos, input]);\n    setInput('');\n  }\n\n  // console.log(todos);\n  return (\n    <div className=\"app\">\n      <h1>To-do app made by {name}</h1>\n      <form>\n        <input type=\"text\" value={input}\n          onChange={e => setInput(e.target.value)} />\n        <button disabled={!input} type=\"submit\" onClick={handleSubmit}>Add Todo</button>\n      </form>\n\n      {todos.map((todo, i) => (\n        <Todo title={todo} key={i} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}